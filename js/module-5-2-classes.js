/*
 * –ö–ª–∞—Å—Å—ã
 * üê∑ - –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
 * üê∑ - –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
 * üê∑ - –º–µ—Ç–æ–¥—ã
 * üê∑ - static      
 * üê∑ - –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞  - –Ω–µ–ª—å–∑—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å, –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å, –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
 * üê∑ - –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ - –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–º—É —Å–≤–æ–π—Å—Ç–≤—É –≤–Ω–µ —Ç–µ–ª–∞ –∫–ª–∞—Å—Å–∞ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É.
 * üê∑ - —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –ø—É–±–ª–∏—á–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–æ–≤
 * üê∑ - –≥–µ—Ç—Ç–µ—Ä—ã –∏ —Å–µ—Ç—Ç–µ—Ä—ã
*/

//  EXAMPLE 1 =====
class User {
    // –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤
    name;
     // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤
    #email;

    // –ê–Ω–∞–ª–æ–≥ —Ñ—É–Ω–∫—Ü–∏–∏-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
    constructor({ name, email }) {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤
        this.name = name;
        this.#email = email;
    }

    // –ê–Ω–∞–ª–æ–≥ User.prototype.getEmail
    getEmail() {
        return this.#email;
    }

    // –ê–Ω–∞–ª–æ–≥ User.prototype.changeEmail
    changeEmail(newEmail) {
        this.#email = newEmail;
    }
}

const mango = new User({ name: '–ú–∞–Ω–≥–æ', email: 'mango@mail.com' });
console.log(mango);                         // User¬†{ name: "–ú–∞–Ω–≥–æ", #email: "mango@mail.com" }

mango.changeEmail('mango@supermail.com');
console.log(mango.getEmail());              // mango@supermail.com
// console.log(mango.#email);                 // **–ë—É–¥–µ—Ç –æ—à–∏–±–∫–∞, —ç—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ**



//  EXAMPLE 2 ===== 
class User1 {
    // –û–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞
    static TYPES = {
        ADMIN: 'admin',
        EDITOR: 'editor',
    };
    #email;
    #type;

    constructor({ email, type }) {
        this.#email = email;
        this.#type = type;
    }

    get type() {
        return this.#type;
    }

    set type(newType) {
        if (User1.TYPES[newType] === undefined) {
            console.log('–û—à–∏–±–∫–∞! –¢–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        }
        return (this.#type = newType);
    }
}

const tango = new User1({
    email: 'mango@mail.com',
    type: User1.TYPES.ADMIN,
});
console.log(tango);                           // User1¬†{ #email: "mango@mail.com", #type: "admin" }

console.log(tango.TYPES);                     // undefined
console.log(User1.TYPES);                     // { ADMIN: 'admin', EDITOR: 'editor' }

console.log(tango.type);                      // admin

tango.type = User1.TYPES.EDITOR;
console.log(tango.type);                      // editor



//  EXAMPLE 3 =====
class User2 {
    // –û–±—å—è–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞
    static #takenEmails = [];
    // –û–±—å—è–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞
    static isEmailTaken(email) {
        return User2.#takenEmails.includes(email);
    }

    #email;

    constructor({ email }) {
        this.#email = email;
        User2.#takenEmails.push(email);
    }
}

const mango1 = new User2({ email: 'mango@mail.com' });

console.log(User2.isEmailTaken('poly@mail.com'));        // false
console.log(User2.isEmailTaken('mango@mail.com'));       // true



//  EXAMPLE 4 =====
class Car {
    // –û–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞
    static description = '–ö–ª–∞—Å—Å –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å';
    // –û–±—å—è–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞
    static logInfo(carObj) {
        console.log(`Car.logInfo -> carObj`, carObj);
    }
    // –û–±—å—è–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞
    #test = 'test';     
    // –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∫–ª–∞—Å—Å–∞ —Ä–∞–∑–º–µ—â–∞–µ–º –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ
    constructor({ brand, model, price } = {}) {
        this.brand = brand;
        this._model = model;
        this._price = price;
    }
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ—Ç—Ç–µ—Ä—ã –∏ —Å–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–≤–æ–π—Å—Ç–≤–∞–º
    get price() {
        return this._price;
    }

    set price(newPrice) {
        this._price = newPrice;
    }
    
    // - –ì–µ—Ç—Ç–µ—Ä - –≤—ã–≤–æ–¥–∏—Ç (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç) –∑–Ω–∞—á–µ–Ω–∏–µ
    get model() {
        return this._model;
    }

    // - –°–µ—Ç—Ç–µ—Ä - –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    set model(newModel) {
        this._model = newModel;
    }
    // getModel(newModel) {
    //     this.model = newModel;
    // }
};
console.dir(Car);                   // class Car

const carInstance = new Car({
    brand: 'Audi',
    model: 'Q7',
    price: 35000,
});

Car.logInfo(carInstance);           // Car.logInfo -> carObj Car¬†{ brand: "Audi", _model: "Q7", _price: 35000, #test: "test" }
console.log(carInstance);           // Car¬†{ brand: "Audi", _model: "Q7", _price: 35000, #test: "test" }

// –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ get –∏ set –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –≤—ã–∑–æ–≤–∞ - —Ç.–µ. –±–µ–∑ ()
// - –ì–µ—Ç—Ç–µ—Ä 
console.log(carInstance.model);     // Q7
console.log(carInstance.price);     // 35000
// - –°–µ—Ç—Ç–µ—Ä
carInstance.model = 'Q5';
console.log(carInstance.model);     // Q5

carInstance.price = 25500;
console.log(carInstance.price);     // 25500



//  EXAMPLE 5 ===== 
// –ö–ª–∞—Å—Å —Å–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ –∏ –º–µ—Ç–æ–¥–∞–º–∏
class Calc {
  // –ö–ª–∞—Å—Å-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è –¥–≤—É—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
  constructor() {}

  // –ú–µ—Ç–æ–¥ –∫–∞–∫ –∑–∞–º–µ–Ω–∞ —Å–≤–æ–π—Å—Ç–≤—É
  static get PI() {
    return 3.14;
  }

  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ +
  static add(...args) {
    return args.reduce((acc, next) => acc + next, 0);
  }

  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ *
  static mult(...args) {
    return args.reduce((acc, next) => acc * next, 1);
  }
}

console.log(Calc.PI);                                    // 3.14
console.log(`–°–ª–æ–∂–µ–Ω–∏–µ:`, Calc.add(2, 3, 4));             // –°–ª–æ–∂–µ–Ω–∏–µ: 9
console.log(`–£–º–Ω–æ–∂–µ–Ω–∏–µ:`, Calc.mult(12, 3, 4));          // –£–º–Ω–æ–∂–µ–Ω–∏–µ: 144



//  EXAMPLE 6 =====
// –ò–°–•–û–î–ù–´–ô –ö–õ–ê–°–°
class Client {
    constructor(login, password) {
        this.login = login;
        this.password = password;
    }

    showLogin() {
        console.log(this.login);
    }
}
// –≠–∫–∑–µ–º–ø–ª—è—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
const simon = new Client(`Simon`, `gtwoth3b`);
console.log(simon);                                 // Client¬†{ login: "Simon", password: "gtwoth3b" }

// –ù–û–í–´–ô (–ù–ê–°–õ–ï–î–£–ï–ú–´–ô) –Ω–∞ –±–∞–∑–µ –ò–°–•–û–î–ù–û–ì–û
class NewClient extends Client {
    constructor(name, age, login, password) {
        // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–ª–∞—Å—Å
        super(login, password);
        this.name = name;
        this.age = age;
    }

    updateAge() {
        return (this.age += 1);
    }
}
// –≠–∫–∑–µ–º–ø–ª—è—Ä –Ω–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
const alex = new NewClient('Alex', 25, 'Alex222', 'qwerty12');
console.log(alex);                                  // NewClient¬†{ login: "Alex222", password: "qwerty12", name: "Alex", age: 25 }
console.log(alex.updateAge());                      // 26
alex.showLogin();                                   // Alex222



//  EXAMPLE 7 =====
class BaseProduct {
    constructor(name, price, category) {
        this.name = name
        this._price = price
        this.category = category
    }
    // —Å–≤–æ–π—Å—Ç–≤–∞-–∞–∫—Å–µ—Å—Å–æ—Ä—ã getter & setter
    get price() {
        return this._price
    }

    set price(value) {
        return (this._price = value)
    }
}

class WeightProduct extends BaseProduct {
    constructor(weight, name, price, category) {
        super(name, price, category)
        this.weight = weight
    }

    getTotalCost() {
        console.log(`–û–±—â–∞—è —Å—É–º–º–∞:`, this.weight * this.price)
    }

    decrWeight(value) {
        let less = this.weight - value;
        if (less < 0) {
            console.log("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ");
        } else {
            console.log(`–û—Å—Ç–∞—Ç–æ–∫:`, less);
            return this.weight = less;
        }
    }

    incWeight(value) {
        let more = this.weight + value;
        console.log(`–ö–æ–ª-–≤–æ –∫–≥ –ø–æ—Å–ª–µ –∑–∞–≤–æ–∑–∞:`, more);
        return this.weight = more;
    }
}
// –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ WeightProduct
const weightProduct = new WeightProduct(2.5, 'Lemon', 30, 'fruits');
console.log(weightProduct);               // WeightProduct¬†{ name: "Lemon", _price: 30, category: "fruits", weight: 2.5 }
weightProduct.getTotalCost();             // –û–±—â–∞—è —Å—É–º–º–∞: 75
weightProduct.decrWeight(2);              // –û—Å—Ç–∞—Ç–æ–∫: 0.5
weightProduct.incWeight(5);               // –ö–æ–ª-–≤–æ –∫–≥ –ø–æ—Å–ª–µ –∑–∞–≤–æ–∑–∞: 5.5
weightProduct.decrWeight(6);              // –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ

class CountProduct extends BaseProduct {
    constructor(count, name, price, category) {
        super(name, price, category);
        this.count = count;
    }
    
    getTotalCost() {
        console.log(`–û–±—â–∞—è —Å—É–º–º–∞:`, this.count * this.price);
    }

    decCount(value) {
        let less = this.count - value;
        if (less < 0) {
            console.log("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ");
        } else {
            console.log(`–û—Å—Ç–∞—Ç–æ–∫:`, less);
            return this.count = less;
        }
    }

    incCount(value) {
        let more = this.count + value;
        console.log(`–ö–æ–ª-–≤–æ –ø–æ—Å–ª–µ –∑–∞–≤–æ–∑–∞:`, more);
        return this.count = more;
    }
}
// –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ CountProduct
const countProduct = new CountProduct(100, 'Snikers', 24, 'sweets');
console.log(countProduct);                 // CountProduct¬†{ name: "Snikers", _price: 24, category: "sweets", count: 100 }

countProduct.getTotalCost();               // –û–±—â–∞—è —Å—É–º–º–∞: 2400
countProduct.price = 40;
console.log(`–¶–µ–Ω–∞:`, countProduct.price);  // –¶–µ–Ω–∞: 40

countProduct.decCount(80);                 // –û—Å—Ç–∞—Ç–æ–∫: 20
countProduct.incCount(55);                 // –ö–æ–ª-–≤–æ –ø–æ—Å–ª–µ –∑–∞–≤–æ–∑–∞: 75