/* –§—É–Ω–∫—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç—ã –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é.
 *
 * –í–æ–∑–≤—Ä–∞—â–∞–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ –≤—Ä–µ–º—è –≤—ã–∑–æ–≤–∞ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø
 * –∫–æ –≤—Å–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º (–æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏)
 * —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ (—Ç–æ–π –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –µ—ë –≤–µ—Ä–Ω—É–ª–∏),
 * —ç—Ç–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è ¬´–∑–∞–º—ã–∫–∞–Ω–∏–µ¬ª.
*/
const fnA = function (parameter) {
    const innerVariable = '–∑–Ω–∞—á–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ fnA';

    const innerFunction = function () {
        console.log(parameter);
        console.log(innerVariable);
        console.log('–≠—Ç–æ –≤—ã–∑–æ–≤ innerFunction');
    };

    return innerFunction;
};

// const fnB = fnA(555);

// fnB();

// console.log(fnB);


/*
*     –ü–æ–≤–∞—Ä—ë–Ω–æ–∫
*/
const makeSheff = function (name) {
    const makeDish = function (dish) {
        console.log(`${name}, is cooking: ${dish}`);   // Mango, is cooking: apple pie  // Mango, is cooking: coffee  // Poly, is cooking: pancakes  // Poly, is cooking: eggs and bacon
    };

    return makeDish;
};

const mango = makeSheff('Mango');

mango('apple pie');
mango('coffee');

console.dir(mango);   // ∆í makeDish(dish)

const poly = makeSheff('Poly');

poly('pancakes');
poly('eggs and bacon');

console.dir(poly);    // ∆í makeDish(dish)


/*
*    –û–∫—Ä—É–≥–ª—è—Ç–æ—Ä ü§∑‚Äç‚ôÇÔ∏è
*/
const floatingPoint = 3.456789;
const someInt = Math.round(floatingPoint); // 3
const withDecimals = Number(floatingPoint.toFixed(2)); // 3.46


// const rounder = function (number, places) {
//     return Number(number.toFixed(places));
// };

// console.log(rounder(3.14567, 2));    // 3.15
// console.log(rounder(3.8567, 3));     // 3.857
// console.log(rounder(5.1234, 2));     // 5.12
// console.log(rounder(3.4567, 3));     // 3.457

const rounder = function (places) {
    return function (number) {
        return Number(number.toFixed(places));
    };
};

const rounder1 = rounder(2);
const rounder2 = rounder(3);

// console.log(rounder1(3.14567));  // 3.15
// console.log(rounder2(3.8567));   // 3.857
// console.log(rounder1(5.1234));   // 5.12
// console.log(rounder2(3.4567));   // 3.457


/*
 * –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ - —Å–∫—Ä—ã—Ç–∏–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
*/
const myLibFactory = function () {
    let value = 0;

    const add = function (num) {
        value += num;
    };

    return {
        add: add,
        getValue() {
            return value;
        },
    };
};

const myLib = myLibFactory();

console.log(myLib);                // {add: ∆í, getValue: ∆í}
console.log(myLib.getValue());     // 0

myLib.add(10);
console.log(myLib.getValue());     // 10


const salaryManagerFactory = function (employeeName, baseSalary = 0) {
    let salary = baseSalary;

    // const changeBy = function (amount) {
    //     salary += amount;
    // };
    return {
        raise(amount) {
            salary += amount;
        },
        lower(amount) {
            salary -= amount;
        },
        current() {
            return `–¢–µ–∫—É—â–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ ${employeeName} - ${salary}kr`;
        },
    };
};

const salaryManager = salaryManagerFactory('Dimon', 26900);

console.log(salaryManager.current());       // –¢–µ–∫—É—â–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ Dimon - 26900kr